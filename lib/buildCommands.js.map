{"version":3,"sources":["../src/buildCommands.js"],"names":["buildPackage","dir","options","nodeExpress","nodeSql","nodeNosql","nodeCli","repo","name","author","version","promptUserInformation","cleanName","toString","trim","path","sh","which","console","error","exec","cd","rm","editPackageJsonAndInstall","log","questions","type","message","validate","input","Promise","res","rej","length","default","answers","inquirer","prompt","rawData","fs","readFileSync","parsedData","JSON","parse","newData","finishedFile","stringify","writeFileSync"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACO,eAAeA,YAAf,CAA4BC,GAA5B,EAAiCC,OAAjC,EAA0C;AAC/C,QAAM;AAAEC,eAAF;AAAeC,WAAf;AAAwBC,aAAxB;AAAmCC;AAAnC,MAAgDJ,OAAtD;AACA,MAAIK,IAAJ;AACA,QAAM;AAAEC,QAAF;AAAQC,UAAR;AAAgBC;AAAhB,MAA6B,MAAMC,uBAAzC;AACA,QAAMC,YAAYJ,KAAKK,QAAL,GAAgBC,IAAhB,EAAlB;AACA,QAAMC,OAAOd,MAAO,GAAEA,GAAI,IAAGW,SAAU,EAA1B,GAA+B,GAAEA,SAAU,EAAxD;AAEA,MAAIT,WAAJ,EAAiBI,OAAO,oDAAP;AACjB,MAAIH,OAAJ,EAAaG,OAAO,EAAP;AACb,MAAIF,SAAJ,EAAeE,OAAO,EAAP;AACf,MAAID,OAAJ,EAAaC,OAAO,EAAP;;AAEb,MAAI,CAACS,iBAAGC,KAAH,CAAS,KAAT,CAAL,EAAsB;AACpBC,YAAQC,KAAR,CAAc,8HAAd;AACD;;AACDH,mBAAGI,IAAH,CAAS,aAAYb,IAAK,IAAGQ,IAAK,EAAlC;;AACAC,mBAAGK,EAAH,CAAMN,IAAN;;AACAC,mBAAGM,EAAH,CAAM,KAAN,EAAa,MAAb;;AACAN,mBAAGI,IAAH,CAAQ,UAAR;;AACAG,4BAA0BX,SAA1B,EAAqCH,MAArC,EAA6CC,OAA7C;;AACAM,mBAAGI,IAAH,CAAQ,aAAR,EAAuB,MAAM;AAC3BF,YAAQM,GAAR,CAAY,4BAAZ;AACD,GAFD;AAGD;;AAGD,eAAeb,qBAAf,GAAuC;AACrC,QAAMc,YAAY,CAChB;AACEC,UAAM,OADR;AAEElB,UAAM,MAFR;AAGEmB,aAAS,0CAHX;;AAIEC,aAASC,KAAT,EAAgB;AACd,aAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/B,YAAI,OAAOH,KAAP,KAAiB,QAAjB,IAA6BA,MAAMI,MAAN,KAAiB,CAAlD,EAAqDF,IAAI,IAAJ,EAArD,KACKC,IAAId,QAAQM,GAAR,CAAY,iBAAZ,CAAJ;AACN,OAHM,CAAP;AAID;;AATH,GADgB,EAYhB;AACEE,UAAM,OADR;AAEElB,UAAM,QAFR;AAGEmB,aAAS,6BAHX;AAIEO,aAAS;AAJX,GAZgB,EAkBhB;AACER,UAAM,OADR;AAEElB,UAAM,SAFR;AAGEmB,aAAS,iDAHX;AAIEO,aAAS;AAJX,GAlBgB,CAAlB;AAyBA,QAAMC,UAAU,MAAMC,kBAASC,MAAT,CAAgBZ,SAAhB,CAAtB;AACA,SAAOU,OAAP;AACD;;AAGD,SAASZ,yBAAT,CAAmCf,IAAnC,EAAyCC,MAAzC,EAAiDC,UAAU,OAA3D,EAAoEK,OAAO,cAA3E,EAA2F;AACzF,QAAMuB,UAAUC,YAAGC,YAAH,CAAgBzB,IAAhB,CAAhB;;AACA,QAAM0B,aAAaC,KAAKC,KAAL,CAAWL,OAAX,CAAnB;AACA,QAAMM,UAAU,EAAE,GAAGH,UAAL;AAAiBjC,QAAjB;AAAuBC,UAAvB;AAA+BC;AAA/B,GAAhB;AACA,QAAMmC,eAAeH,KAAKI,SAAL,CAAeF,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAArB;AACA,SAAOL,YAAGQ,aAAH,CAAiBhC,IAAjB,EAAuB8B,YAAvB,CAAP;AACD","sourcesContent":["import sh from 'shelljs';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\n// async function editPackageJson(package) {\n\n// }\n\n// async function getPackage(opts = {}) {\n//   if (opts.type === 'node.express') {\n//     await sh.exec('git clone https://github.com/maxwellsmart84/nodeApiPlate.git');\n//   }\n//   return console.log('WIP');\n//\n\n// eslint-disable-next-line\nexport async function buildPackage(dir, options) {\n  const { nodeExpress, nodeSql, nodeNosql, nodeCli, } = options;\n  let repo;\n  const { name, author, version, } = await promptUserInformation();\n  const cleanName = name.toString().trim();\n  const path = dir ? `${dir}/${cleanName}` : `${cleanName}`;\n\n  if (nodeExpress) repo = 'https://github.com/maxwellsmart84/nodeApiPlate.git';\n  if (nodeSql) repo = '';\n  if (nodeNosql) repo = '';\n  if (nodeCli) repo = '';\n\n  if (!sh.which('git')) {\n    console.error('Sorry, this program requires git, go here for more information https://git-scm.com/book/en/v2/Getting-Started-Installing-Git');\n  }\n  sh.exec(`git clone ${repo} ${path}`);\n  sh.cd(path);\n  sh.rm('-rf', '.git');\n  sh.exec('git init');\n  editPackageJsonAndInstall(cleanName, author, version);\n  sh.exec('npm install', () => {\n    console.log('Installing Dependencies...');\n  });\n}\n\n\nasync function promptUserInformation() {\n  const questions = [\n    {\n      type: 'input',\n      name: 'name',\n      message: 'What is this project\\'s name? (required)',\n      validate(input) {\n        return new Promise((res, rej) => {\n          if (typeof input === 'string' && input.length !== 0) res(true);\n          else rej(console.log(' Input required'));\n        });\n      },\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: 'What is the author\\'s name?',\n      default: '',\n    },\n    {\n      type: 'input',\n      name: 'version',\n      message: 'What is the version number? (defaults to 1.0.0)',\n      default: '1.0.0',\n    }\n  ];\n  const answers = await inquirer.prompt(questions);\n  return answers;\n}\n\n\nfunction editPackageJsonAndInstall(name, author, version = '1.0.0', path = 'package.json') {\n  const rawData = fs.readFileSync(path);\n  const parsedData = JSON.parse(rawData);\n  const newData = { ...parsedData, name, author, version, };\n  const finishedFile = JSON.stringify(newData, null, 2);\n  return fs.writeFileSync(path, finishedFile);\n}\n\n"],"file":"buildCommands.js"}