{"version":3,"sources":["../src/buildCommands.js"],"names":["buildPackage","dir","options","nodeExpress","nodeSql","nodeNosql","nodeCli","repo","name","author","version","promptUserInformation","cleanName","toString","trim","path","sh","which","console","error","chalk","red","bold","sqlAnswers","promptSqlInformation","log","exec","e","cd","rm","editPackageJsonAndInstall","info","yellow","green","process","exit","questions","type","message","blue","validate","input","Promise","res","rej","length","default","answers","inquirer","prompt","sqlEngineQuestion","choices","value","sqlEngine","promptSqlite","promptSqlConectionInformation","valQuestion","question","rawData","fs","readFileSync","parsedData","JSON","parse","newData","finishedFile","stringify","writeFileSync"],"mappings":"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","sourcesContent":["import sh from 'shelljs';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\nimport chalk from 'chalk';\n\nexport async function buildPackage(dir, options) {\n  const { nodeExpress, nodeSql, nodeNosql, nodeCli, } = options;\n  let repo;\n  const { name, author, version, } = await promptUserInformation();\n  const cleanName = name.toString().trim();\n  const path = dir ? `${dir}/${cleanName}` : `${cleanName}`;\n\n  if (nodeExpress) repo = 'https://github.com/maxwellsmart84/nodeApiPlate.git';\n  if (nodeSql) repo = 'https://github.com/maxwellsmart84/nodeCliPlate.git';\n  if (nodeNosql) repo = '';\n  if (nodeCli) repo = '';\n\n  if (!sh.which('git')) {\n    console.error(chalk.red.bold('Sorry, this program requires git, go here for more information https://git-scm.com/book/en/v2/Getting-Started-Installing-Git'));\n  }\n  if (nodeSql) {\n    const sqlAnswers = await promptSqlInformation();\n    console.log(sqlAnswers);\n  }\n  try {\n    await sh.exec(`git clone ${repo} ${path}`);\n  } catch (e) {\n    return console.error(`Error cloning repo: ${e}`);\n  }\n  sh.cd(path);\n  sh.rm('-rf', '.git');\n  sh.exec('git init');\n  editPackageJsonAndInstall(cleanName, author, version);\n  console.info(chalk.yellow.bold('Installing Dependencies...'));\n  sh.exec('npm install');\n  console.info(chalk.green.bold('Finished! Thanks for using Platemail! Happy Coding!'));\n  return process.exit(0);\n}\n\n\nasync function promptUserInformation() {\n  const questions = [\n    {\n      type: 'input',\n      name: 'name',\n      message: chalk.blue('What is this project\\'s name?', chalk.red.bold('--required')),\n      validate(input) {\n        return new Promise((res, rej) => {\n          if (typeof input === 'string' && input.length !== 0) res(true);\n          else rej(console.log(chalk.red.bold(' Input required')));\n        });\n      },\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: chalk.blue('What is the author\\'s name?'),\n      default: '',\n    },\n    {\n      type: 'input',\n      name: 'version',\n      message: chalk.blue('What is the version number?'),\n      default: '1.0.0',\n    }\n  ];\n  const answers = await inquirer.prompt(questions);\n  return answers;\n}\n\nasync function promptSqlInformation() {\n  const sqlEngineQuestion = [\n    {\n      type: 'list',\n      name: 'sqlEngine',\n      choices: [\n        {\n          name: 'MySql',\n          value: 'mySql',\n        },\n        {\n          name: 'PostgreSQL',\n          value: 'pg',\n        },\n        {\n          name: 'Sqlite3',\n          value: 'sqlite3',\n        }\n      ],\n      message: chalk.blue('Please select a SQL engine'),\n    }\n  ];\n  const { sqlEngine, } = await inquirer.prompt(sqlEngineQuestion);\n  if (sqlEngine === 'sqlite3') return { ...await promptSqlite(), sqlEngine, };\n  return promptSqlConectionInformation(sqlEngine);\n  // Edit env file\n}\n\n// TODO: Figure out best way to edit dotEnv files(fs or dotEnv module?...)\n// function editSqlEnvs(data) {\n// }\n\nasync function promptSqlConectionInformation(sqlEngine) {\n  console.log('SQLENGINE', sqlEngine);\n  const questions = [\n    {\n      type: 'input',\n      name: 'sqlUser',\n      message: chalk.blue('What is the SQL username?'),\n      default: 'root',\n    },\n    {\n      type: 'password',\n      name: 'password',\n      message: chalk.blue('SQL User password'),\n      default: 'password',\n    },\n    {\n      type: 'input',\n      name: 'databaseName',\n      message: chalk.blue('What is the database name?'),\n      default: '',\n    },\n    {\n      type: 'input',\n      name: 'host',\n      message: chalk.blue('What is the host address of your sql server?'),\n      default: '127.0.0.1',\n    }\n  ];\n  const answers = await inquirer.prompt(questions);\n  if (sqlEngine === 'pg') {\n    const valQuestion = {\n      type: 'input',\n      name: 'version',\n      message: chalk.blue('What version of Postgres?'),\n    };\n    return { ...answers, ...await inquirer.prompt(valQuestion), };\n  }\n  return answers;\n}\n\nfunction promptSqlite() {\n  const question = {\n    type: 'input',\n    name: 'filepath',\n    message: 'What is the filepath to your sqlite database?',\n  };\n  return inquirer.prompt(question);\n}\n\n\nfunction editPackageJsonAndInstall(name, author, version = '1.0.0', path = 'package.json') {\n  const rawData = fs.readFileSync(path);\n  const parsedData = JSON.parse(rawData);\n  const newData = { ...parsedData, name, author, version, };\n  const finishedFile = JSON.stringify(newData, null, 2);\n  return fs.writeFileSync(path, finishedFile);\n}\n\n"],"file":"buildCommands.js"}