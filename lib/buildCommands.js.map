{"version":3,"sources":["../src/buildCommands.js"],"names":["buildPackage","opts","dir","console","log","sh","which","git","answers","promptUserInformation","questions","type","name","message","validate","Promise","res","rej","input","length","default","resolve","inquirer","prompt","then","editPackageJson","author","version","path","rawData","fs","readFileSync","JSON","parse","newData","writeFile","stringify","err"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGe,eAAeA,YAAf,CAA4BC,OAAO,EAAnC,EAAuCC,MAAM,IAA7C,EAAmD;AAChEC,UAAQC,GAAR,CAAY,eAAZ;;AACA,MAAI,CAACC,iBAAGC,KAAH,CAASC,GAAT,CAAL,EAAoB;AAClBJ,YAAQC,GAAR,CAAY,8HAAZ;AACD;;AACDD,UAAQC,GAAR,CAAYH,IAAZ,EAAkBC,GAAlB;AACA,QAAMM,UAAU,MAAMC,uBAAtB;AACAN,UAAQC,GAAR,CAAYI,OAAZ,EAPgE,CAQhE;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOL,QAAQC,GAAR,CAAY,KAAZ,CAAP;AACD;;AAGD,eAAeK,qBAAf,GAAuC;AACrC,QAAMC,YAAY,CAChB;AACEC,UAAM,OADR;AAEEC,UAAM,MAFR;AAGEC,aAAS,0CAHX;;AAIEC,eAAW;AACT,aAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/B,YAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6BA,MAAMC,MAAN,KAAiB,CAAlD,EAAqDH,MAArD,KACKC,IAAId,QAAQC,GAAR,CAAY,gBAAZ,CAAJ;AACN,OAHM,CAAP;AAID;;AATH,GADgB,EAYhB;AACEO,UAAM,OADR;AAEEC,UAAM,QAFR;AAGEC,aAAS,6BAHX;AAIEO,aAAS;AAJX,GAZgB,EAkBhB;AACET,UAAM,OADR;AAEEC,UAAM,SAFR;AAGEC,aAAS,iDAHX;AAIEO,aAAS;AAJX,GAlBgB,EAwBhB;AAAET,UAAM;AAAR,GAxBgB,CAAlB;AA0BAI,UAAQM,OAAR,CAAgBC,kBAASC,MAAT,CAAgBb,SAAhB,CAAhB,EACGc,IADH,CACQrB,QAAQC,GAAR,CAAY,SAAZ,EAAuBM,SAAvB,CADR;AAED;;AAGD,SAASe,eAAT,CAAyBb,IAAzB,EAA+Bc,MAA/B,EAAuCC,UAAU,OAAjD,EAA0DC,OAAO,gBAAjE,EAAmF;AACjF,QAAMC,UAAUC,YAAGC,YAAH,CAAgBC,KAAKC,KAAL,CAAWL,IAAX,CAAhB,CAAhB;;AACA,QAAMM,UAAU,EAAE,GAAGL,OAAL;AAAcjB,QAAd;AAAoBc,UAApB;AAA4BC;AAA5B,GAAhB;;AAEAG,cAAGK,SAAH,CAAaP,IAAb,EAAmBI,KAAKI,SAAL,CAAeF,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAAnB,EAAsDG,GAAD,IAAS;AAC5D,QAAIA,GAAJ,EAAS;AACPlC,cAAQC,GAAR,CAAY,iBAAZ;AACD;;AACDD,YAAQC,GAAR,CAAa,mBAAkBwB,IAAK,EAApC;AACD,GALD;;AAMA,SAAO,IAAP;AACD","sourcesContent":["import sh from 'shelljs';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\n// async function editPackageJson(package) {\n\n// }\n\n// async function getPackage(opts = {}) {\n//   if (opts.type === 'node.express') {\n//     await sh.exec('git clone https://github.com/maxwellsmart84/nodeApiPlate.git');\n//   }\n//   return console.log('WIP');\n//\n\n\nexport default async function buildPackage(opts = {}, dir = './') {\n  console.log('GETTING HERRE');\n  if (!sh.which(git)) {\n    console.log('Sorry, this program requires git, go here for more information https://git-scm.com/book/en/v2/Getting-Started-Installing-Git');\n  }\n  console.log(opts, dir);\n  const answers = await promptUserInformation();\n  console.log(answers);\n  // if (opts.type === 'node.express') {\n  //   sh.exec('git clone https://github.com/maxwellsmart84/nodeApiPlate.git', (data, stdout, stderr) => {\n  //     console.log(data);\n  //     console.log(stdout);\n  //     console.log(stderr);\n  //   });\n  // }\n  return console.log('WIP');\n}\n\n\nasync function promptUserInformation() {\n  const questions = [\n    {\n      type: 'input',\n      name: 'name',\n      message: 'What is this project\\'s name? (required)',\n      validate() {\n        return new Promise((res, rej) => {\n          if (typeof input === 'string' && input.length !== 0) res();\n          else rej(console.log('Input required'));\n        });\n      },\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: 'What is the author\\'s name?',\n      default: '',\n    },\n    {\n      type: 'input',\n      name: 'version',\n      message: 'What is the version number? (defaults to 1.0.0)',\n      default: '1.0.0',\n    },\n    { type: '', }\n  ];\n  Promise.resolve(inquirer.prompt(questions))\n    .then(console.log('CHOICES', questions));\n}\n\n\nfunction editPackageJson(name, author, version = '1.0.0', path = './package.json') {\n  const rawData = fs.readFileSync(JSON.parse(path));\n  const newData = { ...rawData, name, author, version, };\n\n  fs.writeFile(path, JSON.stringify(newData, null, 2), (err) => {\n    if (err) {\n      console.log('cant write file');\n    }\n    console.log(`writing to file:${path}`);\n  });\n  return null;\n}\n\n"],"file":"buildCommands.js"}