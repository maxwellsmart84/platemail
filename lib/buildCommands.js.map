{"version":3,"sources":["../src/buildCommands.js"],"names":["buildPackage","dir","options","console","log","nodeExpress","nodeSql","nodeNosql","nodeCli","repo","answers","promptUserInformation","cleanName","name","toString","trim","path","sh","which","exec","data","stdout","stderr","error","cd","rm","questions","type","message","validate","input","Promise","res","rej","length","default","inquirer","prompt"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACO,eAAeA,YAAf,CAA4BC,GAA5B,EAAiCC,OAAjC,EAA0C;AAC/CC,UAAQC,GAAR,CAAYF,OAAZ;AACA,QAAM;AAAEG,eAAF;AAAeC,WAAf;AAAwBC,aAAxB;AAAmCC;AAAnC,MAAgDN,OAAtD;AACA,MAAIO,IAAJ;AACA,QAAMC,UAAU,MAAMC,uBAAtB;AACA,QAAMC,YAAYF,QAAQG,IAAR,CAAaC,QAAb,GAAwBC,IAAxB,EAAlB;AACA,QAAMC,OAAOf,MAAO,GAAEA,GAAI,IAAGW,SAAU,EAA1B,GAA+B,KAAIA,SAAU,EAA1D;AAEA,MAAIP,WAAJ,EAAiBI,OAAO,oDAAP;AACjB,MAAIH,OAAJ,EAAaG,OAAO,EAAP;AACb,MAAIF,SAAJ,EAAeE,OAAO,EAAP;AACf,MAAID,OAAJ,EAAaC,OAAO,EAAP;;AAEb,MAAI,CAACQ,iBAAGC,KAAH,CAAS,KAAT,CAAL,EAAsB;AACpBf,YAAQC,GAAR,CAAY,8HAAZ;AACD;;AACDa,mBAAGE,IAAH,CAAS,aAAYV,IAAK,IAAGO,IAAK,EAAlC,EAAqC,CAACI,IAAD,EAAOC,MAAP,EAAeC,MAAf,KAA0B;AAC7D,QAAIA,MAAJ,EAAY;AACVnB,cAAQoB,KAAR,CAAe,UAASD,MAAO,EAA/B;AACD;AACF,GAJD;;AAKAL,mBAAGO,EAAH,CAAMR,IAAN;;AACAC,mBAAGQ,EAAH,CAAM,KAAN,EAAa,MAAb;;AACAR,mBAAGE,IAAH,CAAQ,UAAR,EAAoB,CAACC,IAAD,EAAOC,MAAP,EAAeC,MAAf,KAA0B;AAC5CnB,YAAQC,GAAR,CAAY,MAAZ,EAAoBgB,IAApB;AACAjB,YAAQC,GAAR,CAAY,QAAZ,EAAsBiB,MAAtB;AACAlB,YAAQC,GAAR,CAAY,QAAZ,EAAsBkB,MAAtB;AACD,GAJD;AAKD;;AAGD,eAAeX,qBAAf,GAAuC;AACrC,QAAMe,YAAY,CAChB;AACEC,UAAM,OADR;AAEEd,UAAM,MAFR;AAGEe,aAAS,0CAHX;;AAIEC,aAASC,KAAT,EAAgB;AACd,aAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/B,YAAI,OAAOH,KAAP,KAAiB,QAAjB,IAA6BA,MAAMI,MAAN,KAAiB,CAAlD,EAAqDF,IAAI,IAAJ,EAArD,KACKC,IAAI9B,QAAQC,GAAR,CAAY,iBAAZ,CAAJ;AACN,OAHM,CAAP;AAID;;AATH,GADgB,EAYhB;AACEuB,UAAM,OADR;AAEEd,UAAM,QAFR;AAGEe,aAAS,6BAHX;AAIEO,aAAS;AAJX,GAZgB,EAkBhB;AACER,UAAM,OADR;AAEEd,UAAM,SAFR;AAGEe,aAAS,iDAHX;AAIEO,aAAS;AAJX,GAlBgB,CAAlB;AAyBA,QAAMzB,UAAU,MAAM0B,kBAASC,MAAT,CAAgBX,SAAhB,CAAtB;AACA,SAAOhB,OAAP;AACD,C,CAGD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import sh from 'shelljs';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\n// async function editPackageJson(package) {\n\n// }\n\n// async function getPackage(opts = {}) {\n//   if (opts.type === 'node.express') {\n//     await sh.exec('git clone https://github.com/maxwellsmart84/nodeApiPlate.git');\n//   }\n//   return console.log('WIP');\n//\n\n// eslint-disable-next-line\nexport async function buildPackage(dir, options) {\n  console.log(options);\n  const { nodeExpress, nodeSql, nodeNosql, nodeCli, } = options;\n  let repo;\n  const answers = await promptUserInformation();\n  const cleanName = answers.name.toString().trim();\n  const path = dir ? `${dir}/${cleanName}` : `./${cleanName}`;\n\n  if (nodeExpress) repo = 'https://github.com/maxwellsmart84/nodeApiPlate.git';\n  if (nodeSql) repo = '';\n  if (nodeNosql) repo = '';\n  if (nodeCli) repo = '';\n\n  if (!sh.which('git')) {\n    console.log('Sorry, this program requires git, go here for more information https://git-scm.com/book/en/v2/Getting-Started-Installing-Git');\n  }\n  sh.exec(`git clone ${repo} ${path}`, (data, stdout, stderr) => {\n    if (stderr) {\n      console.error(`Error: ${stderr}`);\n    }\n  });\n  sh.cd(path);\n  sh.rm('-rf', '.git');\n  sh.exec('git init', (data, stdout, stderr) => {\n    console.log('DATA', data);\n    console.log('STDOUT', stdout);\n    console.log('STDERR', stderr);\n  });\n}\n\n\nasync function promptUserInformation() {\n  const questions = [\n    {\n      type: 'input',\n      name: 'name',\n      message: 'What is this project\\'s name? (required)',\n      validate(input) {\n        return new Promise((res, rej) => {\n          if (typeof input === 'string' && input.length !== 0) res(true);\n          else rej(console.log(' Input required'));\n        });\n      },\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: 'What is the author\\'s name?',\n      default: '',\n    },\n    {\n      type: 'input',\n      name: 'version',\n      message: 'What is the version number? (defaults to 1.0.0)',\n      default: '1.0.0',\n    }\n  ];\n  const answers = await inquirer.prompt(questions);\n  return answers;\n}\n\n\n// function editPackageJson(name, author, version = '1.0.0', path = './package.json') {\n//   const rawData = fs.readFileSync(JSON.parse(path));\n//   const newData = { ...rawData, name, author, version, };\n\n//   fs.writeFile(path, JSON.stringify(newData, null, 2), (err) => {\n//     if (err) {\n//       console.log('cant write file');\n//     }\n//     console.log(`writing to file:${path}`);\n//   });\n//   return null;\n// }\n\n"],"file":"buildCommands.js"}