{"version":3,"sources":["../src/buildCommands.js"],"names":["buildPackage","dir","options","nodeExpress","nodeSql","nodeNosql","nodeCli","repo","name","author","version","promptUserInformation","cleanName","toString","trim","path","sh","which","console","error","chalk","red","bold","promptSqlInformation","cloneAndGitInit","editPackageJsonAndInstall","info","yellow","exec","green","process","exit","cd","rm","questions","type","message","blue","validate","input","Promise","res","rej","length","log","default","answers","inquirer","prompt","sqlEngineQuestion","choices","value","when","sqlEngine","rawData","fs","readFileSync","parsedData","JSON","parse","newData","finishedFile","stringify","writeFileSync"],"mappings":"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","sourcesContent":["import sh from 'shelljs';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\nimport chalk from 'chalk';\n\nexport async function buildPackage(dir, options) {\n  const { nodeExpress, nodeSql, nodeNosql, nodeCli, } = options;\n  let repo;\n  const { name, author, version, } = await promptUserInformation();\n  const cleanName = name.toString().trim();\n  const path = dir ? `${dir}/${cleanName}` : `${cleanName}`;\n\n  if (nodeExpress) repo = 'https://github.com/maxwellsmart84/nodeApiPlate.git';\n  if (nodeSql) repo = 'https://github.com/maxwellsmart84/nodeCliPlate.git';\n  if (nodeNosql) repo = '';\n  if (nodeCli) repo = '';\n\n  if (!sh.which('git')) {\n    console.error(chalk.red.bold('Sorry, this program requires git, go here for more information https://git-scm.com/book/en/v2/Getting-Started-Installing-Git'));\n  }\n  if (nodeSql) {\n    await promptSqlInformation();\n  }\n  cloneAndGitInit(repo, path);\n  editPackageJsonAndInstall(cleanName, author, version);\n  console.info(chalk.yellow.bold('Installing Dependencies...'));\n  sh.exec('npm install');\n  console.info(chalk.green.bold('Finished! Thanks for using Platemail! Happy Coding!'));\n  return process.exit(0);\n}\n\nfunction cloneAndGitInit(repo, path) {\n  sh.exec(`git clone ${repo} ${path}`);\n  sh.cd(path);\n  sh.rm('-rf', '.git');\n  sh.exec('git init');\n}\n\n\nasync function promptUserInformation() {\n  const questions = [\n    {\n      type: 'input',\n      name: 'name',\n      message: chalk.blue('What is this project\\'s name?', chalk.red.bold('--required')),\n      validate(input) {\n        return new Promise((res, rej) => {\n          if (typeof input === 'string' && input.length !== 0) res(true);\n          else rej(console.log(chalk.red.bold(' Input required')));\n        });\n      },\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: chalk.blue('What is the author\\'s name?'),\n      default: '',\n    },\n    {\n      type: 'input',\n      name: 'version',\n      message: chalk.blue('What is the version number?'),\n      default: '1.0.0',\n    }\n  ];\n  const answers = await inquirer.prompt(questions);\n  return answers;\n}\n\nasync function promptSqlInformation() {\n  const sqlEngineQuestion = [\n    {\n      type: 'list',\n      name: 'sqlEngine',\n      choices: [\n        {\n          name: 'MySql',\n          value: 'mySql',\n        },\n        {\n          name: 'PostgreSQL',\n          value: 'pg',\n        },\n        {\n          name: 'Sqlite3',\n          value: 'sqlite3',\n        }\n      ],\n      message: chalk.blue('Please select a SQL engine'),\n    },\n    {\n      type: 'input',\n      name: '',\n      message: '',\n      when(input) {\n        return new Promise((res, rej) => {\n          res(console.log(input));\n        });\n      },\n    }\n\n  ];\n  const sqlEngine = await inquirer.prompt(sqlEngineQuestion);\n  return sqlEngine;\n}\n\n\nfunction editPackageJsonAndInstall(name, author, version = '1.0.0', path = 'package.json') {\n  const rawData = fs.readFileSync(path);\n  const parsedData = JSON.parse(rawData);\n  const newData = { ...parsedData, name, author, version, };\n  const finishedFile = JSON.stringify(newData, null, 2);\n  return fs.writeFileSync(path, finishedFile);\n}\n\n"],"file":"buildCommands.js"}