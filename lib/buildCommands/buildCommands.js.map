{"version":3,"sources":["../../src/buildCommands/buildCommands.js"],"names":["buildPackage","dir","options","nodeExpress","nodeSql","nodeNosql","nodeCli","repo","name","author","version","promptUserInformation","cleanName","toString","trim","path","sh","which","console","error","chalk","red","bold","sqlEngine","sqlConnectionSettings","exec","e","cd","rm","editPackageJsonAndInstall","info","yellow","green","process","exit","questions","type","message","blue","validate","input","Promise","res","rej","length","log","default","answers","inquirer","prompt","undefined","rawData","fs","readFileSync","packageJSON","JSON","parse","dependencies","dependencyKeys","Object","keys","newDependencies","reduce","obj","key","newData","finishedFile","stringify","writeFileSync"],"mappings":"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","sourcesContent":["import sh from 'shelljs';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport { promptSqlInformation } from './sqlCommands';\n\nexport async function buildPackage(dir, options) {\n  const { nodeExpress, nodeSql, nodeNosql, nodeCli, } = options;\n  let repo;\n  const { name, author, version, } = await promptUserInformation();\n  const cleanName = name.toString().trim();\n  const path = dir ? `${dir}/${cleanName}` : `${cleanName}`;\n\n  if (nodeExpress) repo = 'https://github.com/maxwellsmart84/nodeApiPlate.git';\n  if (nodeSql) repo = 'https://github.com/maxwellsmart84/nodeCliPlate.git';\n  if (nodeNosql) repo = '';\n  if (nodeCli) repo = '';\n\n  if (!sh.which('git')) {\n    console.error(chalk.red.bold('Sorry, this program requires git, go here for more information https://git-scm.com/book/en/v2/Getting-Started-Installing-Git'));\n  }\n  if (nodeSql) {\n    const { sqlEngine, sqlConnectionSettings, } = await promptSqlInformation();\n  }\n  try {\n    await sh.exec(`git clone ${repo} ${path}`);\n  } catch (e) {\n    return console.error(`Error cloning repo: ${e}`);\n  }\n  sh.cd(path);\n  sh.rm('-rf', '.git');\n  sh.exec('git init');\n  editPackageJsonAndInstall({ name: cleanName, author, version, sqlEngine, });\n  console.info(chalk.yellow.bold('Installing Dependencies...'));\n  sh.exec('npm install');\n  console.info(chalk.green.bold('Finished! Thanks for using Platemail! Happy Coding!'));\n  return process.exit(0);\n}\n\n\nasync function promptUserInformation() {\n  const questions = [\n    {\n      type: 'input',\n      name: 'name',\n      message: chalk.blue('What is this project\\'s name?', chalk.red.bold('--required')),\n      validate(input) {\n        return new Promise((res, rej) => {\n          if (typeof input === 'string' && input.length !== 0) res(true);\n          else rej(console.log(chalk.red.bold(' Input required')));\n        });\n      },\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: chalk.blue('What is the author\\'s name?'),\n      default: '',\n    },\n    {\n      type: 'input',\n      name: 'version',\n      message: chalk.blue('What is the version number?'),\n      default: '1.0.0',\n    }\n  ];\n  const answers = await inquirer.prompt(questions);\n  return answers;\n}\n\nfunction editPackageJsonAndInstall({ name = '', author = '', version = '1.0.0', sqlEngine = undefined, } = {}) {\n  const rawData = fs.readFileSync('package.json');\n  const packageJSON = JSON.parse(rawData);\n  // filter out other engines\n  let { dependencies, } = packageJSON;\n  const dependencyKeys = Object.keys(dependencies);\n  const newDependencies = [...sqlEngine, 'express', 'bodyparser', 'dotenv', 'knex'];\n\n  dependencies = newDependencies\n    .reduce((obj, key) => ({ ...obj, [key]: dependencyKeys[key], }), {});\n\n  const newData = { ...packageJSON, name, author, version, dependencies, };\n  const finishedFile = JSON.stringify(newData, null, 2);\n  return fs.writeFileSync('package.json', finishedFile);\n}\n\n"],"file":"buildCommands.js"}