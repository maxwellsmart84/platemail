{"version":3,"sources":["../../src/buildCommands/buildCommands.js"],"names":["buildPackage","dir","options","repo","sqlInfo","nodeExpress","nodeSql","nodeNosql","nodeCli","name","author","version","promptUserInformation","cleanName","toString","trim","path","sh","which","console","error","chalk","red","bold","exec","e","sqlEngine","dbName","dbHost","dbUser","dbPass","cd","rm","editPackageJsonAndInstall","editEnvFile","info","yellow","silent","green","process","exit","questions","type","message","validate","input","Promise","res","rej","length","log","default","answers","inquirer","prompt","rawData","fs","readFileSync","packageJSON","JSON","parse","newData","finishedFile","stringify","writeFileSync","envFile"],"mappings":"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","sourcesContent":["import sh from 'shelljs';\nimport fs, { writeFileSync } from 'fs';\nimport inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport { promptSqlInformation } from './sqlCommands';\n\nexport async function buildPackage(dir, options) {\n  let repo;\n  let sqlInfo;\n  const { nodeExpress, nodeSql, nodeNosql, nodeCli } = options;\n  const { name, author, version } = await promptUserInformation();\n  const cleanName = name.toString().trim();\n  const path = dir ? `${dir}/${cleanName}` : `${cleanName}`;\n\n  if (nodeExpress) repo = 'https://github.com/maxwellsmart84/nodeApiPlate.git';\n  if (nodeSql) repo = 'https://github.com/maxwellsmart84/nodeApiSql.git';\n  if (nodeNosql) repo = '';\n  if (nodeCli) repo = 'https://github.com/maxwellsmart84/nodeCliPlate.git';\n\n  if (!sh.which('git')) {\n    console.error(chalk.red.bold('Sorry, this program requires git, go here for more information https://git-scm.com/book/en/v2/Getting-Started-Installing-Git'));\n  }\n  if (nodeSql) {\n    sqlInfo = await promptSqlInformation();\n  }\n  try {\n    await sh.exec(`git clone ${repo} ${path}`);\n  } catch (e) {\n    return console.error(`Error cloning repo: ${e}`);\n  }\n  const { sqlEngine, dbName, dbHost, dbUser, dbPass } = sqlInfo;\n  sh.cd(path);\n  sh.rm('-rf', '.git');\n  sh.exec('git init');\n  editPackageJsonAndInstall({ name: cleanName, author, version });\n  editEnvFile({ dbPass, dbName, dbHost, dbUser, sqlEngine });\n  console.info(chalk.yellow.bold('Installing Dependencies...'));\n  sh.exec('npm install', { silent: true });\n  sh.exec(`npm install ${sqlEngine} --save`, { silent: true });\n  console.info(chalk.green.bold('Finished! Thanks for using Platemail! Happy Coding!'));\n  return process.exit(0);\n}\n\n\nasync function promptUserInformation() {\n  const questions = [\n    {\n      type: 'input',\n      name: 'name',\n      message: chalk.green('What is this project\\'s name?', chalk.red.bold('--required')),\n      validate(input) {\n        return new Promise((res, rej) => {\n          if (typeof input === 'string' && input.length !== 0) res(true);\n          else rej(console.log(chalk.red.bold(' Input required')));\n        });\n      },\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: chalk.green('What is the author\\'s name?'),\n      default: '',\n    },\n    {\n      type: 'input',\n      name: 'version',\n      message: chalk.green('What is the version number?'),\n      default: '1.0.0',\n    }\n  ];\n  const answers = await inquirer.prompt(questions);\n  return answers;\n}\n\nfunction editPackageJsonAndInstall({ name = '', author = '', version = '1.0.0' } = {}) {\n  const rawData = fs.readFileSync('package.json');\n  const packageJSON = JSON.parse(rawData);\n  const newData = { ...packageJSON, name, author, version };\n  const finishedFile = JSON.stringify(newData, null, 2);\n  return fs.writeFileSync('package.json', finishedFile);\n}\n\nfunction editEnvFile({ sqlEngine = '', dbName = '', dbHost = '', dbUser = '', dbPass = '' } = {}) {\n  const envFile = `\n  PORT=8080\n  SQL_CLIENT=${sqlEngine}\n  DB_HOST=${dbHost}\n  DB_USER=${dbUser}\n  DB_PASS=${dbPass}\n  DB_NAME=${dbName}`;\n\n  return writeFileSync('./.env', envFile);\n}\n"],"file":"buildCommands.js"}