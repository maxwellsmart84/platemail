{"version":3,"sources":["../../src/buildCommands/buildCommands.js"],"names":["buildPackage","dir","options","repo","sqlInfo","noSqlInfo","nodeExpress","nodeSql","nodeNoSql","nodeCli","name","author","version","promptUserInformation","cleanName","toString","trim","path","sh","which","console","error","chalk","red","bold","exec","e","cd","rm","editPackageJsonAndInstall","info","yellow","silent","sqlEngine","dbName","dbHost","dbUser","dbPass","editEnvFile","green","process","exit","questions","type","message","validate","input","Promise","res","rej","length","log","default","answers","inquirer","prompt","rawData","fs","readFileSync","packageJSON","JSON","parse","newData","finishedFile","stringify","writeFileSync","envFile"],"mappings":"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","sourcesContent":["import sh from 'shelljs';\nimport fs, { writeFileSync } from 'fs';\nimport inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport { promptSqlInformation } from './sqlCommands';\nimport { promptNoSqlInformation } from './noSqlCommands';\n\nexport async function buildPackage(dir, options) {\n  let repo;\n  let sqlInfo;\n  let noSqlInfo;\n  const { nodeExpress, nodeSql, nodeNoSql, nodeCli } = options;\n  const { name, author, version } = await promptUserInformation();\n  const cleanName = name.toString().trim();\n  const path = dir ? `${dir}/${cleanName}` : `${cleanName}`;\n\n  if (nodeExpress) repo = 'https://github.com/maxwellsmart84/nodeApiPlate.git';\n  if (nodeSql) repo = 'https://github.com/maxwellsmart84/nodeApiSql.git';\n  if (nodeNoSql) repo = '';\n  if (nodeCli) repo = 'https://github.com/maxwellsmart84/nodeCliPlate.git';\n\n  if (!sh.which('git')) {\n    console.error(chalk.red.bold('Sorry, this program requires git, go here for more information https://git-scm.com/book/en/v2/Getting-Started-Installing-Git'));\n  }\n  if (nodeSql) {\n    sqlInfo = await promptSqlInformation();\n  }\n  if (nodeNoSql) {\n    noSqlInfo = await promptNoSqlInformation();\n  }\n  try {\n    await sh.exec(`git clone ${repo} ${path}`);\n  } catch (e) {\n    return console.error(`Error cloning repo: ${e}`);\n  }\n  sh.cd(path);\n  sh.rm('-rf', '.git');\n  sh.exec('git init');\n  editPackageJsonAndInstall({ name: cleanName, author, version });\n  console.info(chalk.yellow.bold('Installing Dependencies...'));\n  sh.exec('npm install', { silent: true });\n  if (nodeNoSql) {\n    const { sqlEngine, dbName, dbHost, dbUser, dbPass } = noSqlInfo;\n    editEnvFile({ dbPass, dbName, dbHost, dbUser, sqlEngine });\n    sh.exec(`npm install ${sqlEngine} --save`, { silent: true });\n  }\n  if (nodeSql) {\n    const { sqlEngine, dbName, dbHost, dbUser, dbPass } = sqlInfo;\n    editEnvFile({ dbPass, dbName, dbHost, dbUser, sqlEngine });\n    sh.exec(`npm install ${sqlEngine} --save`, { silent: true });\n  }\n  console.info(chalk.green.bold('Finished! Thanks for using Platemail! Happy Coding!'));\n  return process.exit(0);\n}\n\n\nasync function promptUserInformation() {\n  const questions = [\n    {\n      type: 'input',\n      name: 'name',\n      message: chalk.green('What is this project\\'s name?', chalk.red.bold('--required')),\n      validate(input) {\n        return new Promise((res, rej) => {\n          if (typeof input === 'string' && input.length !== 0) res(true);\n          else rej(console.log(chalk.red.bold(' Input required')));\n        });\n      },\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: chalk.green('What is the author\\'s name?'),\n      default: '',\n    },\n    {\n      type: 'input',\n      name: 'version',\n      message: chalk.green('What is the version number?'),\n      default: '1.0.0',\n    }\n  ];\n  const answers = await inquirer.prompt(questions);\n  return answers;\n}\n\nfunction editPackageJsonAndInstall({ name = '', author = '', version = '1.0.0' } = {}) {\n  const rawData = fs.readFileSync('package.json');\n  const packageJSON = JSON.parse(rawData);\n  const newData = { ...packageJSON, name, author, version };\n  const finishedFile = JSON.stringify(newData, null, 2);\n  return fs.writeFileSync('package.json', finishedFile);\n}\n\nfunction editEnvFile({ sqlEngine = '', dbName = '', dbHost = '', dbUser = '', dbPass = '' } = {}) {\n  const envFile = `\n  PORT=8080\n  SQL_CLIENT=${sqlEngine}\n  DB_HOST=${dbHost}\n  DB_USER=${dbUser}\n  DB_PASS=${dbPass}\n  DB_NAME=${dbName}`;\n\n  return writeFileSync('./.env', envFile);\n}\n\n"],"file":"buildCommands.js"}